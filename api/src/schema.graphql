type PlanRoot {
  _id: Long!
  id: String!
  label: String!
  label_fr: String
  plan_class: String!
  has_primary_domain: [Domain]
    @relation(name: "HAS_PRIMARY_DOMAIN", direction: "OUT")
  has_category: [CompetencyCategory]
    @relation(name: "HAS_CATEGORY", direction: "OUT")
  HAS_CATEGORY_rel: [HAS_CATEGORY]
  has_milestone: [Milestone] @relation(name: "HAS_MILESTONE", direction: "OUT")
  competencycategories: [CompetencyCategory]
    @relation(name: "IS_CATEGORY_OF", direction: "IN")
  progressnames: [ProgressResult]
    @cypher(
      statement: """
      MATCH (this)-[r:HAS_CUSTOM_PROGRESS_NAME]->(pn:ProgressName)
      RETURN {order: r.order, label: pn.label} ORDER BY r.order
      """
    )
}

type ProgressResult {
  order: Int!
  label: String!
}

type Competency {
  _id: Long!
  default_expiration: String
  default_weight: String!
  id: String!
  label: String!
  link: String
  parent_id: String!
  smartsheet_id: String!
  has_primary_domain: [Domain]
    @relation(name: "HAS_PRIMARY_DOMAIN", direction: "OUT")
  is_in_group: [CompetencyCategory]
    @relation(name: "IS_IN_GROUP", direction: "OUT")
  IS_IN_GROUP_rel: [IS_IN_GROUP]
  # Start Custom
  target_competency: [TargetCompetency]
    @cypher(
      statement: """
      MATCH (this)-[r:HAS_TARGET_COMPETENCY]->(tc:TargetCompetency)
      WHERE NOT EXISTS(r.to) RETURN tc LIMIT 1
      """
    )
  assessment_criteria: [AssessmentCriteria]
    @cypher(
      statement: """
      MATCH (this)-[r:HAS_ASSESSMENT_CRITERIA]->(ac:AssessmentCriteria)
      WHERE NOT EXISTS(r.to) RETURN ac LIMIT 1
      """
    )
  short_name: [ShortName]
    @cypher(
      statement: """
      MATCH (this)-[r:HAS_SHORT_NAME]->(sn:ShortName)
      WHERE NOT EXISTS(r.to) RETURN sn LIMIT 1
      """
    )
  lv0_activity: [Lv0Activities]
    @cypher(
      statement: """
      MATCH (this)-[r:HAS_LV0_ACTIVITIES]->(l0:Lv0Activities)
      WHERE NOT EXISTS(r.to) RETURN l0 LIMIT 1
      """
    )
  lv1_activity: [Lv1Activities]
    @cypher(
      statement: """
      MATCH (this)-[r:HAS_LV1_ACTIVITIES]->(l1:Lv1Activities)
      WHERE NOT EXISTS(r.to) RETURN l1 LIMIT 1
      """
    )
  lv2_activity: [Lv2Activities]
    @cypher(
      statement: """
      MATCH (this)-[r:HAS_LV2_ACTIVITIES]->(l2:Lv2Activities)
      WHERE NOT EXISTS(r.to) RETURN l2 LIMIT 1
      """
    )
  lv3_activity: [Lv3Activities]
    @cypher(
      statement: """
      MATCH (this)-[r:HAS_LV3_ACTIVITIES]->(l3:Lv3Activities)
      WHERE NOT EXISTS(r.to) RETURN l3 LIMIT 1
      """
    )
  lv4_activity: [Lv4Activities]
    @cypher(
      statement: """
      MATCH (this)-[r:HAS_LV4_ACTIVITIES]->(l4:Lv4Activities)
      WHERE NOT EXISTS(r.to) RETURN l4 LIMIT 1
      """
    )
  lv5_activity: [Lv5Activities]
    @cypher(
      statement: """
      MATCH (this)-[r:HAS_LV5_ACTIVITIES]->(l5:Lv5Activities)
      WHERE NOT EXISTS(r.to) RETURN l5 LIMIT 1
      """
    )
  # End Custom
  competencycategorys: [CompetencyCategory]
    @relation(name: "CATEGORY_HAS_COMPETENCIES_OF", direction: "IN")
  competencygroups: [CompetencyGroup]
    @relation(name: "GROUP_HAS_COMPETENCIES_OF", direction: "IN")
  progresss: [Progress] @relation(name: "COMPETENCY_PROGRESS", direction: "IN")
  domains: [Domain] @relation(name: "PRIMARY_DOMAIN_OF", direction: "IN")
  orders: [OrderType]
    @cypher(
      statement: """
      MATCH (this)-[r:IS_IN_GROUP]->()
      RETURN {order: r.order, planId: r.planId}
      """
    )
}

type OrderType {
  order: Int
  planId: Int
}

type CompetencyCategory {
  _id: Long!
  color: String
  id: String!
  label: String!
  level: String!
  parent_id: String!
  smartsheet_id: String!
  is_category_of: [PlanRoot] @relation(name: "IS_CATEGORY_OF", direction: "OUT")
  IS_CATEGORY_OF_rel: [IS_CATEGORY_OF]
  has_group: [CompetencyGroup] @relation(name: "HAS_GROUP", direction: "OUT")
  category_has_competencies_of: [Competency]
    @relation(name: "CATEGORY_HAS_COMPETENCIES_OF", direction: "OUT")
  CATEGORY_HAS_COMPETENCIES_OF_rel: [CATEGORY_HAS_COMPETENCIES_OF]
  target_value_is: [Milestone]
    @relation(name: "TARGET_VALUE_IS", direction: "OUT")
  TARGET_VALUE_IS_rel: [TARGET_VALUE_IS]
  planroots: [PlanRoot] @relation(name: "HAS_CATEGORY", direction: "IN")
  # Begin Custom
  target_competency: [TargetCompetency]
    @cypher(
      statement: """
      MATCH (this)-[r:HAS_TARGET_COMPETENCY]->(tc:TargetCompetency)
      WHERE NOT EXISTS(r.to) RETURN tc LIMIT 1
      """
    )
  childComps: [Competency]
    @cypher(
      statement: """
      MATCH (this)-[:CATEGORY_HAS_COMPETENCIES_OF]->(comp:Competency)
      return comp
      """
    )
  ancestorComps: [Competency]
    @cypher(
      statement: """
      MATCH (this)-[:CATEGORY_HAS_COMPETENCIES_OF]->(c1:Competency)
      Return c1 as ancestors
      UNION
      MATCH (this)-[:HAS_GROUP]->(:CompetencyGroup)-[:GROUP_HAS_COMPETENCIES_OF]->(c2:Competency)
      Return c2 as ancestors
      UNION
      MATCH (this)-[:HAS_GROUP]->(:CompetencyGroup)-[:HAS_GROUP]->(:CompetencyGroup)-[:GROUP_HAS_COMPETENCIES_OF]->(c3:Competency)
      Return c3 as ancestors
      """
    )
  orders: [OrderType]
    @cypher(
      statement: """
      MATCH (this)-[r:IS_CATEGORY_OF]->()
      RETURN {order: r.order, planId: r.planId}
      """
    )
  # End Custom
}

type CompetencyGroup {
  _id: Long!
  id: String!
  label: String!
  level: String!
  parent_id: String!
  smartsheet_id: String!
  has_group: [CompetencyGroup] @relation(name: "HAS_GROUP", direction: "OUT")
  group_has_competencies_of: [Competency]
    @relation(name: "GROUP_HAS_COMPETENCIES_OF", direction: "OUT")
  GROUP_HAS_COMPETENCIES_OF_rel: [GROUP_HAS_COMPETENCIES_OF]
  #Begin Custom
  childComps: [Competency]
    @cypher(
      statement: """
      MATCH (this)-[:GROUP_HAS_COMPETENCIES_OF]->(comp:Competency)
      return comp
      """
    )
  ancestorComps: [Competency]
    @cypher(
      statement: """
      MATCH (this)-[:GROUP_HAS_COMPETENCIES_OF]->(c1:Competency)
      Return c1 as ancestors
      UNION
      MATCH (this)-[:HAS_GROUP]->(:CompetencyGroup)-[:GROUP_HAS_COMPETENCIES_OF]->(c2:Competency)
      Return c2 as ancestors
      """
    )
  orders: [OrderType]
    @cypher(
      statement: """
      MATCH (this)-[r:IS_IN_GROUP]->()
      RETURN {order: r.order, planId: r.planId}
      """
    )
  #End Custom
}

type TargetCompetency {
  _id: Long!
  id: String!
  label: String!
  label_created: String!
  label_es_created: String
  label_es_modified: String
  label_fr: String
  label_fr_created: String
  label_fr_modified: String
  label_modified: String
  competencys: [Competency]
    @relation(name: "HAS_TARGET_COMPETENCY", direction: "IN")
}

type AssessmentCriteria {
  _id: Long!
  id: String!
  label: String!
  label_created: String!
  label_es_created: String
  label_es_modified: String
  label_fr: String
  label_fr_created: String
  label_fr_modified: String
  label_modified: String
  competencys: [Competency]
    @relation(name: "HAS_ASSESSMENT_CRITERIA", direction: "IN")
}

type ShortName {
  _id: Long!
  id: String!
  label: String!
  label_created: String
  label_es_created: String
  label_es_modified: String
  label_fr: String
  label_fr_created: String
  label_fr_modified: String
  label_modified: String
  competencys: [Competency] @relation(name: "HAS_SHORT_NAME", direction: "IN")
}

type Lv0Activities {
  _id: Long!
  id: String!
  label: String!
  label_created: String!
  label_es_created: String
  label_es_modified: String
  label_fr: String
  label_fr_created: String
  label_fr_modified: String
  label_modified: String
  competencys: [Competency]
    @relation(name: "HAS_LV0_ACTIVITIES", direction: "IN")
}

type Lv1Activities {
  _id: Long!
  id: String!
  label: String!
  label_created: String!
  label_es_created: String
  label_es_modified: String
  label_fr: String
  label_fr_created: String
  label_fr_modified: String
  label_modified: String
  competencys: [Competency]
    @relation(name: "HAS_LV1_ACTIVITIES", direction: "IN")
}

type Lv2Activities {
  _id: Long!
  id: String!
  label: String!
  label_created: String!
  label_es_created: String
  label_es_modified: String
  label_fr: String
  label_fr_created: String
  label_fr_modified: String
  label_modified: String
  competencys: [Competency]
    @relation(name: "HAS_LV2_ACTIVITIES", direction: "IN")
}

type Lv3Activities {
  _id: Long!
  id: String!
  label: String!
  label_created: String!
  label_es_created: String
  label_es_modified: String
  label_fr: String
  label_fr_created: String
  label_fr_modified: String
  label_modified: String
  competencys: [Competency]
    @relation(name: "HAS_LV3_ACTIVITIES", direction: "IN")
}

type Lv4Activities {
  _id: Long!
  id: String!
  label: String!
  label_created: String!
  label_es_created: String
  label_es_modified: String
  label_fr: String
  label_fr_created: String
  label_fr_modified: String
  label_modified: String
  competencys: [Competency]
    @relation(name: "HAS_LV4_ACTIVITIES", direction: "IN")
}

type Lv5Activities {
  _id: Long!
  id: String!
  label: String!
  label_created: String!
  label_es_created: String
  label_es_modified: String
  label_fr: String
  label_fr_created: String
  label_fr_modified: String
  label_modified: String
  competencys: [Competency]
    @relation(name: "HAS_LV5_ACTIVITIES", direction: "IN")
}

type User {
  _id: Long!
  Name: String!
  activePlan: String!
  id: String!
  primaryDomain: String!
  primaryOrg: String!
  has_progress_root: [ProgressRoot]
    @relation(name: "HAS_PROGRESS_ROOT", direction: "OUT")
}

type ProgressRoot {
  _id: Long!
  userId: String!
  child_progress: [Progress] @relation(name: "CHILD_PROGRESS", direction: "OUT")
  CHILD_PROGRESS_rel: [CHILD_PROGRESS]
  users: [User] @relation(name: "HAS_PROGRESS_ROOT", direction: "IN")
}

type Progress {
  _id: Long!
  competency_ref: String!
  currentLevel: Int!
  competency_progress: [Competency]
    @relation(name: "COMPETENCY_PROGRESS", direction: "OUT")
  COMPETENCY_PROGRESS_rel: [COMPETENCY_PROGRESS]
  progressroots: [ProgressRoot]
    @relation(name: "CHILD_PROGRESS", direction: "IN")
}

type ProgressName {
  _id: Long!
  label: String
}

type Milestone {
  _id: Long!
  ms: String!
  competencycategories: [CompetencyCategory]
    @relation(name: "TARGET_VALUE_IS", direction: "IN")
  minValues: [MinPair]
    @cypher(
      statement: """
      MATCH p=(c)-[r:TARGET_VALUE_IS]->(this)
      WHERE NOT EXISTS(r.to)
      RETURN {id: c.id, min: r.min, planId: r.planId}
      """
    )
  short_name: [ShortName]
    @cypher(
      statement: """
      MATCH (this)-[r:HAS_SHORT_NAME]->(sn:ShortName)
      WHERE NOT EXISTS(r.to) RETURN sn LIMIT 1
      """
    )
}

type MinPair {
  id: String
  min: Int
  planId: String
}

type Domain {
  _id: Long!
  id: String!
  label: String!
  label_fr: String!
  primary_domain_of: [Competency]
    @relation(name: "PRIMARY_DOMAIN_OF", direction: "OUT")
  PRIMARY_DOMAIN_OF_rel: [PRIMARY_DOMAIN_OF]
  childPlans: [PlanRoot]
    @cypher(
      statement: """
      MATCH (p:PlanRoot)-[:HAS_PRIMARY_DOMAIN]->(this)
      return p
      """
    )
}

type HAS_CATEGORY @relation(name: "HAS_CATEGORY") {
  from: PlanRoot!
  to: CompetencyCategory!
  order: String!
  planId: String!
  startDate: String
}

type IS_CATEGORY_OF @relation(name: "IS_CATEGORY_OF") {
  from: CompetencyCategory!
  to: PlanRoot!
  order: String!
  planId: String!
  startDate: String
}

type IS_IN_GROUP @relation(name: "IS_IN_GROUP") {
  from: Competency!
  to: CompetencyCategory!
  order: String!
  planId: String!
  startDate: String
}

type CATEGORY_HAS_COMPETENCIES_OF
  @relation(name: "CATEGORY_HAS_COMPETENCIES_OF") {
  from: CompetencyCategory!
  to: Competency!
  order: String!
  planId: String!
  startDate: String
}

type GROUP_HAS_COMPETENCIES_OF @relation(name: "GROUP_HAS_COMPETENCIES_OF") {
  from: CompetencyGroup!
  to: Competency!
  order: String!
  planId: String!
  startDate: String
}

type HAS_TARGET_COMPETENCY @relation(name: "HAS_TARGET_COMPETENCY") {
  from: Competency!
  to: TargetCompetency!
  startDate: String
}

type HAS_ASSESSMENT_CRITERIA @relation(name: "HAS_ASSESSMENT_CRITERIA") {
  from: Competency!
  to: AssessmentCriteria!
  startDate: String
}

type HAS_SHORT_NAME @relation(name: "HAS_SHORT_NAME") {
  from: Competency!
  to: ShortName!
  startDate: String
}

type HAS_LV0_ACTIVITIES @relation(name: "HAS_LV0_ACTIVITIES") {
  from: Competency!
  to: Lv0Activities!
  startDate: String!
}

type HAS_LV1_ACTIVITIES @relation(name: "HAS_LV1_ACTIVITIES") {
  from: Competency!
  to: Lv1Activities!
  startDate: String!
}

type HAS_LV2_ACTIVITIES @relation(name: "HAS_LV2_ACTIVITIES") {
  from: Competency!
  to: Lv2Activities!
  startDate: String!
}

type HAS_LV3_ACTIVITIES @relation(name: "HAS_LV3_ACTIVITIES") {
  from: Competency!
  to: Lv3Activities!
  startDate: String!
}

type HAS_LV4_ACTIVITIES @relation(name: "HAS_LV4_ACTIVITIES") {
  from: Competency!
  to: Lv4Activities!
  startDate: String!
}

type HAS_LV5_ACTIVITIES @relation(name: "HAS_LV5_ACTIVITIES") {
  from: Competency!
  to: Lv5Activities!
  startDate: String!
}

type TARGET_VALUE_IS @relation(name: "TARGET_VALUE_IS") {
  from: CompetencyCategory!
  to: Milestone!
  min: Int!
  planId: String!
}

type CHILD_PROGRESS @relation(name: "CHILD_PROGRESS") {
  from: ProgressRoot!
  to: Progress!
  userId: String!
}

type COMPETENCY_PROGRESS @relation(name: "COMPETENCY_PROGRESS") {
  from: Progress!
  to: Competency!
  userId: String!
}

type PRIMARY_DOMAIN_OF @relation(name: "PRIMARY_DOMAIN_OF") {
  from: Domain!
  to: Competency!
  startDate: String!
}
